package templates

import (
	"fmt"
	"strconv"
	"strings"
	"github.com/ngenohkevin/kuiper_admin/internal/models"
)

templ ProductList(products []models.Product) {
	@Layout("Products") {
		<div class="sm:flex sm:items-center">
			<div class="sm:flex-auto">
				<h1 class="text-3xl font-semibold leading-tight text-gray-900 dark:text-gray-100">Products</h1>
				<p class="mt-2 text-sm text-gray-700 dark:text-gray-300">
					A list of all products in your store
				</p>
			</div>
			<div class="mt-4 sm:ml-16 sm:mt-0 sm:flex-none">
				<a
					href="/products/new"
					hx-boost="true"
					class="block rounded-md bg-purple-600 px-3 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-purple-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-purple-600"
				>
					Add product
				</a>
			</div>
		</div>

		<!-- Search Form -->
		<div class="mt-6">
			<form action="/products" method="get" class="max-w-md" hx-get="/products" hx-trigger="submit" hx-target="#content-area" hx-select="#content-area" hx-push-url="true" onsubmit="event.preventDefault(); this.dispatchEvent(new Event('htmx:trigger'));">
				<div class="relative rounded-md shadow-sm">
					<div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
						<svg class="h-5 w-5 text-gray-400 dark:text-gray-500" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
							<path fill-rule="evenodd" d="M9 3.5a5.5 5.5 0 100 11 5.5 5.5 0 000-11zM2 9a7 7 0 1112.452 4.391l3.328 3.329a.75.75 0 11-1.06 1.06l-3.329-3.328A7 7 0 012 9z" clip-rule="evenodd" />
						</svg>
					</div>
					<input
						type="text"
						name="q"
						id="search"
						class="block w-full rounded-md border-0 py-2 pl-10 text-gray-900 dark:text-white bg-white dark:bg-gray-700 shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-600 placeholder:text-gray-400 dark:placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-purple-600 dark:focus:ring-purple-500 sm:text-sm sm:leading-6"
						placeholder="Search products by name, description..."
						hx-get="/products"
						hx-trigger="keyup changed delay:500ms"
						hx-target="#content-area"
						hx-select="#content-area"
						hx-push-url="true"
					/>
					<div class="absolute inset-y-0 right-0 flex items-center pr-3">
						<button type="submit" class="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200">
							Search
						</button>
					</div>
				</div>
			</form>
		</div>

		<div id="content-area" class="mt-8">
			if len(products) > 0 {
				<!-- Mobile-first horizontal card layout -->
				<div class="block md:hidden space-y-4">
					for _, product := range products {
						<div id={ "product-card-" + product.ID } class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4">
							<div class="flex items-center space-x-4">
								<!-- Product Image -->
								<div class="flex-shrink-0">
									if len(product.ImageURLs) > 0 {
										<img 
											src={ product.ImageURLs[0] }
											alt={ product.Name }
											class="h-16 w-16 rounded-lg object-cover bg-gray-200 dark:bg-gray-700"
											onerror="this.style.display='none'; this.nextElementSibling.style.display='flex'"
										/>
										<div class="h-16 w-16 bg-gray-200 dark:bg-gray-700 rounded-lg flex items-center justify-center" style="display: none;">
											<svg class="h-8 w-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
											</svg>
										</div>
									} else {
										<div class="h-16 w-16 bg-gray-200 dark:bg-gray-700 rounded-lg flex items-center justify-center">
											<svg class="h-8 w-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
											</svg>
										</div>
									}
								</div>
								
								<!-- Product Info -->
								<div class="flex-1 min-w-0">
									<div class="flex items-start justify-between">
										<div class="flex-1">
											<h3 class="text-base font-semibold text-gray-900 dark:text-gray-100 truncate">
												{ product.Name }
											</h3>
											<div class="flex flex-wrap items-center gap-1 mt-1">
												if product.Category != nil {
													<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-300">
														{ product.Category.Name }
													</span>
												}
												if product.HasVariants {
													<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-300">
														{ strconv.Itoa(len(product.Variants)) } variants
													</span>
												}
												if product.IsAvailable {
													<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-300">
														<div class="w-1.5 h-1.5 bg-green-400 rounded-full mr-1"></div>
														Active
													</span>
												} else {
													<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-300">
														<div class="w-1.5 h-1.5 bg-red-400 rounded-full mr-1"></div>
														Inactive
													</span>
												}
											</div>
										</div>
										<div class="text-right ml-2">
											<div class="text-lg font-bold text-green-600 dark:text-green-400">
												${ fmt.Sprintf("%.2f", product.Price) }
											</div>
											<div class="text-sm text-gray-500 dark:text-gray-400">
												{ strconv.Itoa(product.StockCount) } in stock
											</div>
										</div>
									</div>
									
									<!-- Actions -->
									<div class="flex items-center justify-end space-x-2 mt-3">
										<a
											href={ templ.SafeURL("/products/" + product.ID) }
											hx-boost="true"
											class="inline-flex items-center px-3 py-1.5 border border-gray-300 dark:border-gray-600 rounded-md text-xs font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors"
										>
											<svg class="h-3 w-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
											</svg>
											View
										</a>
										<a
											href={ templ.SafeURL("/products/" + product.ID + "/edit") }
											hx-boost="true"
											class="inline-flex items-center px-3 py-1.5 border border-purple-300 dark:border-purple-600 rounded-md text-xs font-medium text-purple-700 dark:text-purple-300 bg-purple-50 dark:bg-purple-900 hover:bg-purple-100 dark:hover:bg-purple-800 transition-colors"
										>
											<svg class="h-3 w-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 0L11.828 15H9v-2.828l8.586-8.586z" />
											</svg>
											Edit
										</a>
										<button
											hx-delete={ "/products/" + product.ID }
											hx-confirm="Are you sure you want to delete this product?"
											hx-target={ "#product-card-" + product.ID }
											hx-swap="outerHTML"
											class="inline-flex items-center px-3 py-1.5 border border-red-300 dark:border-red-600 rounded-md text-xs font-medium text-red-700 dark:text-red-300 bg-red-50 dark:bg-red-900 hover:bg-red-100 dark:hover:bg-red-800 transition-colors"
										>
											<svg class="h-3 w-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
											</svg>
											Delete
										</button>
									</div>
								</div>
							</div>
						</div>
					}
				</div>
				
				<!-- Desktop table layout -->
				<div class="hidden md:block overflow-hidden shadow ring-1 ring-black ring-opacity-5 dark:ring-white dark:ring-opacity-10 sm:rounded-lg">
					<table class="min-w-full divide-y divide-gray-300 dark:divide-gray-700">
						<thead class="bg-gray-50 dark:bg-gray-800">
							<tr>
								<th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 dark:text-gray-100 sm:pl-6">Name</th>
								<th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-gray-100">Category</th>
								<th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-gray-100">Price</th>
								<th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-gray-100">Stock</th>
								<th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-gray-100">Status</th>
								<th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6">
									<span class="sr-only">Actions</span>
								</th>
							</tr>
						</thead>
						<tbody class="divide-y divide-gray-200 dark:divide-gray-700 bg-white dark:bg-gray-800">
							for _, product := range products {
								<tr id={ "product-row-" + product.ID } class="hover:bg-gray-50 dark:hover:bg-gray-700">
									<td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 dark:text-gray-100 sm:pl-6">
										{ product.Name }
									</td>
									<td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-300">
										if product.Category != nil {
											{ product.Category.Name }
										} else {
											<span class="text-gray-400 dark:text-gray-500">Uncategorized</span>
										}
									</td>
									<td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-300">
										${ fmt.Sprintf("%.2f", product.Price) }
									</td>
									<td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-300">
										{ strconv.Itoa(product.StockCount) }
									</td>
									<td class="whitespace-nowrap px-3 py-4 text-sm">
										<div class="flex flex-col space-y-1">
											if product.IsAvailable {
												<span class="inline-flex items-center rounded-full bg-green-100 dark:bg-green-900 px-2.5 py-0.5 text-xs font-medium text-green-800 dark:text-green-300">
													Available
												</span>
											} else {
												<span class="inline-flex items-center rounded-full bg-red-100 dark:bg-red-900 px-2.5 py-0.5 text-xs font-medium text-red-800 dark:text-red-300">
													Unavailable
												</span>
											}
											
											if product.HasVariants {
												<span class="inline-flex items-center rounded-full bg-blue-100 dark:bg-blue-900 px-2.5 py-0.5 text-xs font-medium text-blue-800 dark:text-blue-300">
													Has Variants
												</span>
											}
										</div>
									</td>
									<td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
										<div class="flex justify-end gap-2">
											<a
												href={ templ.SafeURL("/products/" + product.ID) }
												hx-boost="true"
												class="text-purple-600 dark:text-purple-400 hover:text-purple-900 dark:hover:text-purple-300"
											>
												View
											</a>
											<span class="text-gray-300 dark:text-gray-600">|</span>
											<a
												href={ templ.SafeURL("/products/" + product.ID + "/edit") }
												hx-boost="true"
												class="text-purple-600 dark:text-purple-400 hover:text-purple-900 dark:hover:text-purple-300"
											>
												Edit
											</a>
											<span class="text-gray-300 dark:text-gray-600">|</span>
											<button
												hx-delete={ "/products/" + product.ID }
												hx-confirm="Are you sure you want to delete this product?"
												hx-target={ "#product-row-" + product.ID }
												hx-swap="outerHTML"
												class="text-red-600 dark:text-red-400 hover:text-red-900 dark:hover:text-red-300"
											>
												Delete
											</button>
										</div>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			} else {
				<div class="py-12 text-center bg-white dark:bg-gray-800 rounded-lg shadow ring-1 ring-black ring-opacity-5 dark:ring-white dark:ring-opacity-10">
					<svg class="mx-auto h-12 w-12 text-gray-400 dark:text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.25 7.5l-.625 10.632a2.25 2.25 0 01-2.247 2.118H6.622a2.25 2.25 0 01-2.247-2.118L3.75 7.5M10 11.25h4M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125z"></path>
					</svg>
					<h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-gray-100">No products</h3>
					<p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Get started by creating a new product.</p>
					<div class="mt-6">
						<a
							href="/products/new"
							hx-boost="true"
							class="inline-flex items-center rounded-md bg-purple-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-purple-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-purple-600"
						>
							<svg class="-ml-0.5 mr-1.5 h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
								<path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path>
							</svg>
							Add product
						</a>
					</div>
				</div>
			}
		</div>
	}
}

templ ProductView(product models.Product) {
	@Layout("View Product") {
		<div class="sm:flex sm:items-center">
			<div class="sm:flex-auto">
				<div class="flex items-center">
					<h1 class="text-3xl font-semibold leading-tight text-gray-900 dark:text-gray-100">{ product.Name }</h1>
					<div class="ml-4">
						<a
							href={ templ.SafeURL("/products/" + product.ID + "/edit") }
							hx-boost="true"
							class="inline-flex items-center rounded-md bg-white dark:bg-gray-700 px-2.5 py-1.5 text-sm font-semibold text-gray-900 dark:text-gray-100 shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600"
						>
							Edit
						</a>
					</div>
				</div>
				<p class="mt-2 text-sm text-gray-700 dark:text-gray-300">Product details</p>
			</div>
			<div class="mt-4 sm:ml-16 sm:mt-0 sm:flex-none">
				<a
					href="/products"
					hx-boost="true"
					class="block rounded-md bg-white dark:bg-gray-700 px-3 py-2 text-center text-sm font-semibold text-gray-900 dark:text-gray-100 shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600"
				>
					Back to products
				</a>
			</div>
		</div>

		<div class="mt-6 border-t border-gray-100 dark:border-gray-700">
			<dl class="divide-y divide-gray-100 dark:divide-gray-700">
				<div class="px-4 py-6 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
					<dt class="text-sm font-medium leading-6 text-gray-900 dark:text-gray-100">Name</dt>
					<dd class="mt-1 text-sm leading-6 text-gray-700 dark:text-gray-300 sm:col-span-2 sm:mt-0">{ product.Name }</dd>
				</div>
				<div class="px-4 py-6 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
					<dt class="text-sm font-medium leading-6 text-gray-900 dark:text-gray-100">Slug</dt>
					<dd class="mt-1 text-sm leading-6 text-gray-700 dark:text-gray-300 sm:col-span-2 sm:mt-0">{ product.Slug }</dd>
				</div>
				<div class="px-4 py-6 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
					<dt class="text-sm font-medium leading-6 text-gray-900 dark:text-gray-100">Category</dt>
					<dd class="mt-1 text-sm leading-6 text-gray-700 dark:text-gray-300 sm:col-span-2 sm:mt-0">
						if product.Category != nil {
							{ product.Category.Name }
						} else {
							<span class="text-gray-400 dark:text-gray-500">Uncategorized</span>
						}
					</dd>
				</div>
				<div class="px-4 py-6 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
					<dt class="text-sm font-medium leading-6 text-gray-900 dark:text-gray-100">Description</dt>
					<dd class="mt-1 text-sm leading-6 text-gray-700 dark:text-gray-300 sm:col-span-2 sm:mt-0">
						if product.Description != "" {
							{ product.Description }
						} else {
							<span class="text-gray-400 dark:text-gray-500">No description</span>
						}
					</dd>
				</div>
				<div class="px-4 py-6 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
					<dt class="text-sm font-medium leading-6 text-gray-900 dark:text-gray-100">Price</dt>
					<dd class="mt-1 text-sm leading-6 text-gray-700 dark:text-gray-300 sm:col-span-2 sm:mt-0">${ fmt.Sprintf("%.2f", product.Price) }</dd>
				</div>
				<div class="px-4 py-6 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
					<dt class="text-sm font-medium leading-6 text-gray-900 dark:text-gray-100">Stock Count</dt>
					<dd class="mt-1 text-sm leading-6 text-gray-700 dark:text-gray-300 sm:col-span-2 sm:mt-0">{ strconv.Itoa(product.StockCount) }</dd>
				</div>
				<div class="px-4 py-6 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
					<dt class="text-sm font-medium leading-6 text-gray-900 dark:text-gray-100">Status</dt>
					<dd class="mt-1 text-sm leading-6 sm:col-span-2 sm:mt-0">
						if product.IsAvailable {
							<span class="inline-flex items-center rounded-full bg-green-100 dark:bg-green-900 px-2.5 py-0.5 text-xs font-medium text-green-800 dark:text-green-300">
								Available
							</span>
						} else {
							<span class="inline-flex items-center rounded-full bg-red-100 dark:bg-red-900 px-2.5 py-0.5 text-xs font-medium text-red-800 dark:text-red-300">
								Unavailable
							</span>
						}
					</dd>
				</div>
				<div class="px-4 py-6 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
					<dt class="text-sm font-medium leading-6 text-gray-900 dark:text-gray-100">Has Variants</dt>
					<dd class="mt-1 text-sm leading-6 sm:col-span-2 sm:mt-0">
						if product.HasVariants {
							<span class="inline-flex items-center rounded-full bg-blue-100 dark:bg-blue-900 px-2.5 py-0.5 text-xs font-medium text-blue-800 dark:text-blue-300">
								Yes
							</span>
						} else {
							<span class="inline-flex items-center rounded-full bg-gray-100 dark:bg-gray-700 px-2.5 py-0.5 text-xs font-medium text-gray-800 dark:text-gray-300">
								No
							</span>
						}
					</dd>
				</div>
				<div class="px-4 py-6 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
					<dt class="text-sm font-medium leading-6 text-gray-900 dark:text-gray-100">Images</dt>
					<dd class="mt-1 text-sm leading-6 text-gray-700 dark:text-gray-300 sm:col-span-2 sm:mt-0">
						if len(product.ImageURLs) > 0 {
							<div class="flex flex-wrap gap-4">
								for _, url := range product.ImageURLs {
									<div class="relative w-40 h-40 border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden">
										<img src={ url } alt={ product.Name } class="w-full h-full object-cover"/>
									</div>
								}
							</div>
						} else {
							<span class="text-gray-400 dark:text-gray-500">No images</span>
						}
					</dd>
				</div>

				// Add a variant section for all products, regardless of HasVariants flag
				<div class="border-t border-gray-100 dark:border-gray-700 mt-8 pt-8">
					<div class="sm:flex sm:items-center">
						<div class="sm:flex-auto">
							<h2 class="text-xl font-semibold leading-tight text-gray-900 dark:text-gray-100">Product Variants</h2>
							<p class="mt-2 text-sm text-gray-700 dark:text-gray-300">
								if product.HasVariants {
									All available variants for this product
								} else {
									Add variants to this product
								}
							</p>
						</div>
						<div class="mt-4 sm:ml-16 sm:mt-0 sm:flex-none">
							<a
								href={ templ.SafeURL("/products/" + product.ID + "/variants/new") }
								class="block rounded-md bg-purple-600 px-3 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-purple-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-purple-600"
							>
								Add variant
							</a>
						</div>
					</div>

					if product.HasVariants && len(product.Variants) > 0 {
						<div class="mt-6 overflow-hidden shadow ring-1 ring-black ring-opacity-5 dark:ring-white dark:ring-opacity-10 sm:rounded-lg">
							<table class="min-w-full divide-y divide-gray-300 dark:divide-gray-700">
								<thead class="bg-gray-50 dark:bg-gray-800">
									<tr>
										<th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 dark:text-gray-100 sm:pl-6">Name</th>
										<th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-gray-100">Price</th>
										<th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-gray-100">Stock</th>
										<th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-gray-100">Status</th>
										<th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6">
											<span class="sr-only">Actions</span>
										</th>
									</tr>
								</thead>
								<tbody class="divide-y divide-gray-200 dark:divide-gray-700 bg-white dark:bg-gray-800">
									for _, variant := range product.Variants {
										<tr id={ "variant-row-" + variant.ID } class="hover:bg-gray-50 dark:hover:bg-gray-700">
											<td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 dark:text-gray-100 sm:pl-6">
												{ variant.Name }
											</td>
											<td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-300">
												${ fmt.Sprintf("%.2f", variant.Price) }
											</td>
											<td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-300">
												{ strconv.Itoa(variant.StockCount) }
											</td>
											<td class="whitespace-nowrap px-3 py-4 text-sm">
												if variant.IsAvailable {
													<span class="inline-flex items-center rounded-full bg-green-100 dark:bg-green-900 px-2.5 py-0.5 text-xs font-medium text-green-800 dark:text-green-300">
														Available
													</span>
												} else {
													<span class="inline-flex items-center rounded-full bg-red-100 dark:bg-red-900 px-2.5 py-0.5 text-xs font-medium text-red-800 dark:text-red-300">
														Unavailable
													</span>
												}
											</td>
											<td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
												<div class="flex justify-end gap-2">
													<a
														href={ templ.SafeURL("/products/" + product.ID + "/variants/" + variant.ID + "/edit") }
														hx-boost="true"
														class="text-purple-600 dark:text-purple-400 hover:text-purple-900 dark:hover:text-purple-300"
													>
														Edit
													</a>
													<span class="text-gray-300 dark:text-gray-600">|</span>
													<button
														hx-delete={ "/products/" + product.ID + "/variants/" + variant.ID }
														hx-confirm="Are you sure you want to delete this variant?"
														hx-target={ "#variant-row-" + variant.ID }
														hx-swap="outerHTML"
														class="text-red-600 dark:text-red-400 hover:text-red-900 dark:hover:text-red-300"
													>
														Delete
													</button>
												</div>
											</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
					} else {
						<div class="bg-white dark:bg-gray-800 shadow overflow-hidden sm:rounded-md mt-6">
							<div class="px-4 py-5 sm:p-6 text-center">
								<p class="text-sm text-gray-500 dark:text-gray-400">
									if product.HasVariants {
										No variants yet. Add your first variant to this product.
									} else {
										This product doesn't have variants yet. Click "Add variant" to create your first variant.
									}
								</p>
							</div>
						</div>
					}
				</div>
			</dl>
		</div>
	}
}

templ ProductForm(product *models.Product, categories []models.Category, isEdit bool) {
	@Layout(getProductTitle(isEdit)) {
		<div class="sm:flex sm:items-center">
			<div class="sm:flex-auto">
				<h1 class="text-3xl font-semibold leading-tight text-gray-900 dark:text-gray-100">
					if isEdit {
						Edit Product
					} else {
						New Product
					}
				</h1>
				<p class="mt-2 text-sm text-gray-700 dark:text-gray-300">
					if isEdit {
						Edit your product details
					} else {
						Create a new product
					}
				</p>
			</div>
			<div class="mt-4 sm:ml-16 sm:mt-0 sm:flex-none">
				<a
					href="/products"
					hx-boost="true"
					class="block rounded-md bg-white dark:bg-gray-700 px-3 py-2 text-center text-sm font-semibold text-gray-900 dark:text-gray-100 shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600"
				>
					Cancel
				</a>
			</div>
		</div>

		<div x-data="{
            variantsEnabled: false,
            variantsCollapsed: true,
            variants: [],
            isEditMode: false,
            addVariant() {
                const weight = (this.variants.length * 5 + 5);
                this.variants.push({
                    name: weight + ' grams',
                    price: '',
                    stock: '0'
                });
            },
            removeVariant(index) {
                this.variants.splice(index, 1);
            },
            applyTemplate(weights) {
                this.variants = weights.map(weight => ({
                    name: weight + ' grams',
                    price: '',
                    stock: '0'
                }));
                this.variantsCollapsed = false;
            },
            toggleVariantsSection() {
                this.variantsCollapsed = !this.variantsCollapsed;
            },
            init() {
                // Use the correct way to check if in edit mode and if the product has variants
                if (document.getElementById('is-edit-mode') && document.getElementById('is-edit-mode').value === 'true') {
                    this.isEditMode = true;
                    if (document.getElementById('has-variants') && document.getElementById('has-variants').value === 'true') {
                        this.variantsEnabled = true;
                        this.variantsCollapsed = false; // Auto-expand when variants are enabled in edit mode
                    }
                }
                
                // Watch for changes to variantsEnabled
                this.$watch('variantsEnabled', (value) => {
                    if (value === true) {
                        // Auto-expand when checkbox is checked and add a sample variant if empty
                        this.variantsCollapsed = false;
                        if (this.variants.length === 0 && !this.isEditMode) {
                            this.addVariant();
                        }
                    }
                });
            }
        }">
			<form 
				x-ref="productForm"
				class="mt-8 max-w-xl"
				method="POST"
				action={templ.SafeURL(func() string {
					if isEdit && product != nil {
						return "/products/" + product.ID
					}
					return "/products"
				}())}
				@submit.prevent="if (variantsEnabled && variants.length === 0 && !isEditMode) { 
					alert('Please add at least one variant or disable variants.');
					return false;
				} else {
					$event.target.submit();
				}"
			>
				if isEdit {
					<input type="hidden" name="_method" value="PUT" />
					<input type="hidden" id="is-edit-mode" value="true" />
					if product != nil {
						<input type="hidden" id="has-variants" value={ fmt.Sprintf("%t", product.HasVariants) } />
					}
				} else {
					<input type="hidden" id="is-edit-mode" value="false" />
				}
				
				<div class="space-y-6">
					<div>
						<label for="name" class="block text-sm font-medium leading-6 text-gray-900 dark:text-gray-100">
							Name <span class="text-red-500">*</span>
						</label>
						<div class="mt-2">
							<input
								type="text"
								name="name"
								id="name"
								if product != nil {
									value={ product.Name }
								}
								required
								class="block w-full rounded-md border-0 py-1.5 text-gray-900 dark:text-white bg-white dark:bg-gray-700 shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-600 placeholder:text-gray-400 dark:placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-purple-600 dark:focus:ring-purple-500 sm:text-sm sm:leading-6"
							/>
						</div>
					</div>

					<div>
						<label for="slug" class="block text-sm font-medium leading-6 text-gray-900 dark:text-gray-100">
							Slug <span class="text-red-500">*</span>
						</label>
						<div class="mt-2">
							<input
								type="text"
								name="slug"
								id="slug"
								if product != nil {
									value={ product.Slug }
								}
								required
								class="block w-full rounded-md border-0 py-1.5 text-gray-900 dark:text-white bg-white dark:bg-gray-700 shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-600 placeholder:text-gray-400 dark:placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-purple-600 dark:focus:ring-purple-500 sm:text-sm sm:leading-6"
							/>
						</div>
						<p class="mt-2 text-sm text-gray-500 dark:text-gray-400">
							URL-friendly version of the name. Use lowercase letters, numbers, and hyphens.
						</p>
					</div>

					<div>
						<label for="category_id" class="block text-sm font-medium leading-6 text-gray-900 dark:text-gray-100">
							Category
						</label>
						<div class="mt-2">
							<select
								id="category_id"
								name="category_id"
								class="block w-full rounded-md border-0 py-1.5 text-gray-900 dark:text-white bg-white dark:bg-gray-700 shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-600 focus:ring-2 focus:ring-inset focus:ring-purple-600 dark:focus:ring-purple-500 sm:text-sm sm:leading-6"
							>
								<option value="">None</option>
								for _, c := range categories {
									<option 
										value={ c.ID }
										if product != nil && product.CategoryID != nil && *product.CategoryID == c.ID {
											selected
										}
									>
										{ c.Name }
									</option>
								}
							</select>
						</div>
					</div>

					<div>
						<label for="description" class="block text-sm font-medium leading-6 text-gray-900 dark:text-gray-100">
							Description
						</label>
						<div class="mt-2">
							<textarea
								id="description"
								name="description"
								rows="4"
								class="block w-full rounded-md border-0 py-1.5 text-gray-900 dark:text-white bg-white dark:bg-gray-700 shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-600 placeholder:text-gray-400 dark:placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-purple-600 dark:focus:ring-purple-500 sm:text-sm sm:leading-6"
							>
								if product != nil {
									{ product.Description }
								}
							</textarea>
						</div>
					</div>

					<div class="grid grid-cols-2 gap-6">
						<div>
							<label for="price" class="block text-sm font-medium leading-6 text-gray-900 dark:text-gray-100">
								Price <span class="text-red-500">*</span>
							</label>
							<div class="mt-2">
								<div class="relative rounded-md shadow-sm">
									<div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
										<span class="text-gray-500 dark:text-gray-400 sm:text-sm">$</span>
									</div>
									<input
										type="number"
										name="price"
										id="price"
										if product != nil {
											value={ fmt.Sprintf("%.2f", product.Price) }
										} else {
											value="0.00"
										}
										step="0.01"
										min="0"
										required
										class="block w-full rounded-md border-0 py-1.5 pl-7 text-gray-900 dark:text-white bg-white dark:bg-gray-700 ring-1 ring-inset ring-gray-300 dark:ring-gray-600 placeholder:text-gray-400 dark:placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-purple-600 dark:focus:ring-purple-500 sm:text-sm sm:leading-6"
									/>
								</div>
							</div>
						</div>

						<div>
							<label for="stock_count" class="block text-sm font-medium leading-6 text-gray-900 dark:text-gray-100">
								Stock Count <span class="text-red-500">*</span>
							</label>
							<div class="mt-2">
								<input
									type="number"
									name="stock_count"
									id="stock_count"
									if product != nil {
										value={ strconv.Itoa(product.StockCount) }
									} else {
										value="0"
									}
									min="0"
									required
									class="block w-full rounded-md border-0 py-1.5 text-gray-900 dark:text-white bg-white dark:bg-gray-700 shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-600 placeholder:text-gray-400 dark:placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-purple-600 dark:focus:ring-purple-500 sm:text-sm sm:leading-6"
								/>
							</div>
						</div>
					</div>

					<div>
						<label for="image_urls" class="block text-sm font-medium leading-6 text-gray-900 dark:text-gray-100">
							Image URLs (one per line)
						</label>
						<div class="mt-2">
							<textarea
								id="image_urls"
								name="image_urls"
								rows="3"
								class="block w-full rounded-md border-0 py-1.5 text-gray-900 dark:text-white bg-white dark:bg-gray-700 shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-600 placeholder:text-gray-400 dark:placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-purple-600 dark:focus:ring-purple-500 sm:text-sm sm:leading-6"
								placeholder="https://example.com/image1.jpg&#10;https://example.com/image2.jpg"
							>
								if product != nil && len(product.ImageURLs) > 0 {
									{ strings.Join(product.ImageURLs, "\n") }
								}
							</textarea>
						</div>
						<p class="mt-2 text-sm text-gray-500 dark:text-gray-400">
							Enter one URL per line for each product image.
						</p>
					</div>

					<div class="flex items-center">
						<input
							id="is_available"
							name="is_available"
							type="checkbox"
							if product == nil || product.IsAvailable {
								checked
							}
							value="true"
							class="h-4 w-4 rounded border-gray-300 dark:border-gray-700 text-purple-600 focus:ring-purple-600 dark:bg-gray-700"
						/>
						<label for="is_available" class="ml-2 block text-sm text-gray-900 dark:text-gray-100">
							Product is available for purchase
						</label>
					</div>

					<!-- Variants section -->
					<div class="pt-6 border-t border-gray-200 dark:border-gray-700">
						<div class="flex items-start">
							<div class="flex h-6 items-center">
								<input 
									id="enable_variants" 
									name="enable_variants" 
									type="checkbox"
									x-model="variantsEnabled"
									@change="if(variantsEnabled && variants.length === 0) { addVariant(); variantsCollapsed = false; }"
									value="true"
									class="h-4 w-4 rounded border-gray-300 dark:border-gray-700 text-purple-600 focus:ring-purple-600 dark:bg-gray-700"
								/>
							</div>
							<div class="ml-3">
								<label for="enable_variants" class="font-medium text-gray-900 dark:text-gray-100">Enable Weight Variants</label>
								<p class="text-gray-500 dark:text-gray-400 text-sm">Enable to add multiple weight-based variants to this product</p>
							</div>
						</div>
					</div>

					<div x-show="variantsEnabled" class="space-y-6">
						<div class="flex justify-between items-center">
							<h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Product Variants</h3>
							<button 
								type="button" 
								x-on:click="toggleVariantsSection"
								class="text-sm text-blue-600 dark:text-blue-400"
							>
								<span x-show="variantsCollapsed">Show section</span>
								<span x-show="!variantsCollapsed">Hide section</span>
							</button>
						</div>
						
						<div x-show="!variantsCollapsed">
							<!-- Existing variants section for edit mode -->
							if isEdit && product != nil && product.HasVariants {
								<div class="mt-4 mb-4">
									<h4 class="text-md font-semibold text-gray-900 dark:text-gray-100 mb-2">Existing Variants</h4>
									if len(product.Variants) > 0 {
										<div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 dark:ring-white dark:ring-opacity-10 sm:rounded-lg">
											<table class="min-w-full divide-y divide-gray-300 dark:divide-gray-700">
												<thead class="bg-gray-50 dark:bg-gray-800">
													<tr>
														<th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 dark:text-gray-100 sm:pl-6">Name</th>
														<th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-gray-100">Price</th>
														<th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-gray-100">Stock</th>
														<th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-gray-100">Status</th>
														<th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6">
															<span class="sr-only">Actions</span>
														</th>
													</tr>
												</thead>
												<tbody class="divide-y divide-gray-200 dark:divide-gray-700 bg-white dark:bg-gray-800">
													for _, variant := range product.Variants {
														<tr id={ "variant-row-" + variant.ID } class="hover:bg-gray-50 dark:hover:bg-gray-700">
															<td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 dark:text-gray-100 sm:pl-6">
																{ variant.Name }
															</td>
															<td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-300">
																${ fmt.Sprintf("%.2f", variant.Price) }
															</td>
															<td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-300">
																{ strconv.Itoa(variant.StockCount) }
															</td>
															<td class="whitespace-nowrap px-3 py-4 text-sm">
																if variant.IsAvailable {
																	<span class="inline-flex items-center rounded-full bg-green-100 dark:bg-green-900 px-2.5 py-0.5 text-xs font-medium text-green-800 dark:text-green-300">
																		Available
																	</span>
																} else {
																	<span class="inline-flex items-center rounded-full bg-red-100 dark:bg-red-900 px-2.5 py-0.5 text-xs font-medium text-red-800 dark:text-red-300">
																		Unavailable
																	</span>
																}
															</td>
															<td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
																<div class="flex justify-end gap-2">
																	<a
																		href={ templ.SafeURL("/products/" + product.ID + "/variants/" + variant.ID + "/edit") }
																		hx-boost="true"
																		class="text-purple-600 dark:text-purple-400 hover:text-purple-900 dark:hover:text-purple-300"
																	>
																		Edit
																	</a>
																	<span class="text-gray-300 dark:text-gray-600">|</span>
																	<button
																		type="button"
																		hx-delete={ "/products/" + product.ID + "/variants/" + variant.ID }
																		hx-confirm="Are you sure you want to delete this variant?"
																		hx-target={ "#variant-row-" + variant.ID }
																		hx-swap="outerHTML"
																		class="text-red-600 dark:text-red-400 hover:text-red-900 dark:hover:text-red-300"
																	>
																		Delete
																	</button>
																</div>
															</td>
														</tr>
													}
												</tbody>
											</table>
										</div>
									} else {
										<p class="text-gray-500 dark:text-gray-400">No variants yet for this product.</p>
									}
									<div class="mt-4">
										<a
											href={ templ.SafeURL("/products/" + product.ID + "/variants/new") }
											hx-boost="true"
											class="inline-flex items-center rounded-md bg-purple-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-purple-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-purple-600"
										>
											<svg class="-ml-0.5 mr-1.5 h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
												<path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path>
											</svg>
											Add new variant
										</a>
									</div>
								</div>
							}
							
							<!-- Weight Templates section - show for both new and edit modes -->
							<div class="border p-4 rounded-md bg-gray-50 dark:bg-gray-800">
								<h3 class="text-lg font-semibold mb-2 text-gray-900 dark:text-gray-100">Weight Templates</h3>
								<div class="grid grid-cols-2 md:grid-cols-4 gap-2">
									<button type="button" class="px-3 py-2 bg-blue-100 dark:bg-blue-900 rounded-md text-blue-800 dark:text-blue-200"
										x-on:click.prevent="applyTemplate([5, 15, 30])">
										Small Weights (5g, 15g, 30g)
									</button>
									<button type="button" class="px-3 py-2 bg-blue-100 dark:bg-blue-900 rounded-md text-blue-800 dark:text-blue-200"
										x-on:click.prevent="applyTemplate([5, 15, 25, 35])">
										Standard Weights (5g, 15g, 25g, 35g)
									</button>
									<button type="button" class="px-3 py-2 bg-blue-100 dark:bg-blue-900 rounded-md text-blue-800 dark:text-blue-200"
										x-on:click.prevent="applyTemplate([10, 20, 30, 40, 50])">
										10g Increments
									</button>
									<button type="button" class="px-3 py-2 bg-blue-100 dark:bg-blue-900 rounded-md text-blue-800 dark:text-blue-200"
										x-on:click.prevent="applyTemplate([25, 50, 75, 100])">
										25g Increments
									</button>
								</div>
							</div>

							<!-- New variants section - show for both new and edit modes -->
							<div class="space-y-4 mt-4">
								<template x-for="(variant, index) in variants" :key="index">
									<div class="border p-4 rounded-md bg-white dark:bg-gray-800">
										<div class="grid grid-cols-1 md:grid-cols-3 gap-4">
											<div>
												<label class="block text-sm font-medium text-gray-900 dark:text-gray-100">Name</label>
												<input type="text" x-bind:name="'variants[' + index + '][name]'" x-model="variant.name"
													class="mt-1 block w-full rounded-md border-0 py-1.5 text-gray-900 dark:text-white bg-white dark:bg-gray-700 shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-600 focus:ring-2 focus:ring-inset focus:ring-purple-600 dark:focus:ring-purple-500 sm:text-sm sm:leading-6" />
											</div>
											<div>
												<label class="block text-sm font-medium text-gray-900 dark:text-gray-100">Price ($)</label>
												<input type="number" step="0.01" min="0" x-bind:name="'variants[' + index + '][price]'" x-model="variant.price"
													class="mt-1 block w-full rounded-md border-0 py-1.5 text-gray-900 dark:text-white bg-white dark:bg-gray-700 shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-600 focus:ring-2 focus:ring-inset focus:ring-purple-600 dark:focus:ring-purple-500 sm:text-sm sm:leading-6" />
											</div>
											<div>
												<label class="block text-sm font-medium text-gray-900 dark:text-gray-100">Stock</label>
												<input type="number" min="0" x-bind:name="'variants[' + index + '][stock]'" x-model="variant.stock" value="0"
													class="mt-1 block w-full rounded-md border-0 py-1.5 text-gray-900 dark:text-white bg-white dark:bg-gray-700 shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-600 focus:ring-2 focus:ring-inset focus:ring-purple-600 dark:focus:ring-purple-500 sm:text-sm sm:leading-6" />
											</div>
										</div>
										<div class="mt-2">
											<button type="button" x-on:click.prevent="removeVariant(index)"
												class="text-sm text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300">
												Remove
											</button>
										</div>
									</div>
								</template>
								
								<div x-show="variants.length === 0" class="text-center py-4 bg-gray-50 dark:bg-gray-800 rounded-md">
									<p class="text-gray-500 dark:text-gray-400">No variants added yet. Add a variant or select a template.</p>
								</div>
								
								<div>
									<button type="button" x-on:click.prevent="addVariant()"
										class="text-sm bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-md px-3 py-2 text-gray-800 dark:text-gray-200">
										+ Add Variant
									</button>
								</div>
							</div>
						</div>
					</div>

					<div class="pt-5">
						<div class="flex justify-end">
							<button
								type="submit"
								class="rounded-md bg-purple-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-purple-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-purple-600"
							>
								if isEdit {
									Update Product
								} else {
									Create Product
								}
							</button>
						</div>
					</div>
				</div>
			</form>
		</div>
	}
}
