package templates

import (
	"fmt"
	"strconv"
	"github.com/ngenohkevin/kuiper_admin/internal/models"
)

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

// Modern product list with integrated variant management
templ ModernProductList(products []models.Product) {
	@Layout("Products") {
		<div class="bg-gray-900 text-white min-h-screen">
			<div class="max-w-7xl mx-auto px-3 sm:px-4 lg:px-6 py-4 sm:py-6 lg:py-8">
				<!-- Header Section -->
				<div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 space-y-4 sm:space-y-0">
					<div>
						<h1 class="text-2xl sm:text-3xl lg:text-4xl font-bold text-indigo-400">Products</h1>
						<p class="text-gray-400 text-sm sm:text-base mt-1">Manage your store inventory</p>
					</div>
					<a
						href="/products/new"
						hx-boost="true"
						class="w-full sm:w-auto inline-flex items-center justify-center px-4 py-3 bg-indigo-600 hover:bg-indigo-700 text-white text-base font-medium rounded-lg shadow-lg transition duration-200 ease-in-out transform hover:scale-105"
					>
						<svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
						</svg>
						Add Product
					</a>
				</div>

				<!-- Search Section -->
				<div class="mb-6">
					<div class="relative rounded-lg shadow-sm max-w-full sm:max-w-lg">
						<input
							type="text"
							placeholder="Search products..."
							class="block w-full p-4 text-base bg-gray-800 border border-gray-700 rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors"
							hx-get="/products"
							hx-trigger="keyup changed delay:500ms"
							hx-target="#products-container"
							hx-swap="innerHTML"
							name="q"
						/>
						<div class="absolute inset-y-0 right-0 pr-4 flex items-center pointer-events-none">
							<svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
							</svg>
						</div>
					</div>
				</div>

				<div id="products-container">
					if len(products) > 0 {
						<!-- Desktop horizontal layout -->
						<div class="hidden lg:block">
							<div class="bg-gray-800 rounded-lg shadow-xl overflow-hidden">
								<div class="overflow-x-auto">
									<table class="min-w-full">
										<thead class="bg-gray-700">
											<tr>
												<th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Product</th>
												<th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Category</th>
												<th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Price</th>
												<th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Stock</th>
												<th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Status</th>
												<th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Variants</th>
												<th class="px-6 py-3 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
											</tr>
										</thead>
										<tbody class="divide-y divide-gray-700">
											for _, product := range products {
												<tr id={ "product-row-" + product.ID } class="bg-gray-800 hover:bg-gray-750 transition-colors">
													<td class="px-6 py-4">
														<div class="flex items-center">
															if len(product.ImageURLs) > 0 {
																<div class="flex-shrink-0 h-12 w-12">
																	<img 
																		src={ GetImageSrc(product.ImageURLs[0]) } 
																		data-external={ product.ImageURLs[0] }
																		alt={ product.Name } 
																		class="h-12 w-12 rounded-lg object-cover bg-gray-600"
																		loading="lazy"
																		crossorigin="anonymous"
																		onerror="window.handleImageError(this)"
																	/>
																	<div class="h-12 w-12 bg-gray-600 rounded-lg flex items-center justify-center" style="display: none;">
																		<svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
																			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
																		</svg>
																	</div>
																</div>
															} else {
																<div class="flex-shrink-0 h-12 w-12 bg-gray-600 rounded-lg flex items-center justify-center">
																	<svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
																		<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
																	</svg>
																</div>
															}
															<div class="ml-4">
																<div class="text-sm font-medium text-gray-200">{ product.Name }</div>
																<div class="text-sm text-gray-400">{ product.Slug }</div>
																if product.Description != "" && len(product.Description) > 50 {
																	<div class="text-xs text-gray-500 mt-1">{ product.Description[:50] }...</div>
																} else if product.Description != "" {
																	<div class="text-xs text-gray-500 mt-1">{ product.Description }</div>
																}
															</div>
														</div>
													</td>
													<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
														if product.Category != nil {
															<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-900 text-blue-200">
																{ product.Category.Name }
															</span>
														} else {
															<span class="text-gray-500">No Category</span>
														}
													</td>
													<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-green-400">
														${ fmt.Sprintf("%.2f", product.Price) }
													</td>
													<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
														{ strconv.Itoa(product.StockCount) }
													</td>
													<td class="px-6 py-4 whitespace-nowrap">
														if product.IsAvailable {
															<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-900 text-green-200">
																Active
															</span>
														} else {
															<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-900 text-red-200">
																Inactive
															</span>
														}
													</td>
													<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
														if product.HasVariants && len(product.Variants) > 0 {
															<div class="flex items-center space-x-1">
																<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-indigo-900 text-indigo-200">
																	{ strconv.Itoa(len(product.Variants)) } variants
																</span>
															</div>
														} else {
															<span class="text-gray-500">None</span>
														}
													</td>
													<td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
														<div class="flex justify-end space-x-2">
															<a 
																href={ templ.SafeURL("/products/" + product.ID) } 
																class="text-gray-400 hover:text-gray-200 p-1 rounded"
																hx-boost="true"
																title="View"
															>
																<svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
																	<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
																	<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
																</svg>
															</a>
															<a 
																href={ templ.SafeURL("/products/" + product.ID + "/edit") } 
																class="text-indigo-400 hover:text-indigo-200 p-1 rounded"
																hx-boost="true"
																title="Edit"
															>
																<svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
																	<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 0L11.828 15H9v-2.828l8.586-8.586z" />
																</svg>
															</a>
															<button 
																class="text-red-500 hover:text-red-400 p-1 rounded"
																hx-delete={ "/products/" + product.ID }
																hx-confirm="Are you sure you want to delete this product? This cannot be undone."
																hx-target={ "#product-row-" + product.ID }
																hx-swap="outerHTML swap:1s"
																title="Delete"
															>
																<svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
																	<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
																</svg>
															</button>
														</div>
													</td>
												</tr>
											}
										</tbody>
									</table>
								</div>
							</div>
						</div>

						<!-- Mobile/Tablet table layout -->
						<div class="lg:hidden">
							<div class="bg-gray-800 rounded-lg shadow-xl overflow-hidden">
								<div class="overflow-x-auto">
									<table class="min-w-full mobile-table">
										<thead class="bg-gray-700">
											<tr>
												<th class="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Product</th>
												<th class="px-4 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Price/Stock</th>
												<th class="px-4 py-3 text-center text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
											</tr>
										</thead>
										<tbody class="divide-y divide-gray-700">
											for _, product := range products {
												<tr id={ "product-row-mobile-" + product.ID } class="bg-gray-800 hover:bg-gray-750 transition-colors">
													<td class="px-4 py-4">
														<div class="flex items-start space-x-3">
															if len(product.ImageURLs) > 0 {
																<div class="flex-shrink-0">
																	<img 
																		src={ GetImageSrc(product.ImageURLs[0]) } 
																		data-external={ product.ImageURLs[0] }
																		alt={ product.Name } 
																		class="h-12 w-12 rounded-lg object-cover bg-gray-600 mobile-image"
																		loading="lazy"
																		crossorigin="anonymous"
																		onerror="window.handleImageError(this)"
																	/>
																	<div class="h-12 w-12 bg-gray-600 rounded-lg flex items-center justify-center mobile-image" style="display: none;">
																		<svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
																			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
																		</svg>
																	</div>
																</div>
															} else {
																<div class="flex-shrink-0 h-12 w-12 bg-gray-600 rounded-lg flex items-center justify-center mobile-image">
																	<svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
																		<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
																	</svg>
																</div>
															}
															<div class="flex-1 min-w-0 mobile-product-info">
																<div class="font-medium text-gray-200 text-base">{ product.Name }</div>
																<div class="flex flex-wrap items-center gap-2 mt-1">
																	if product.Category != nil {
																		<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-900 text-blue-200 mobile-badge">
																			{ product.Category.Name }
																		</span>
																	}
																	if product.HasVariants && len(product.Variants) > 0 {
																		<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-purple-900 text-purple-200 mobile-badge">
																			{ strconv.Itoa(len(product.Variants)) } variants
																		</span>
																	}
																	if product.IsAvailable {
																		<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-900 text-green-200 mobile-badge">
																			<div class="w-1.5 h-1.5 bg-green-400 rounded-full mr-1"></div>
																			Active
																		</span>
																	} else {
																		<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-red-900 text-red-200 mobile-badge">
																			<div class="w-1.5 h-1.5 bg-red-400 rounded-full mr-1"></div>
																			Inactive
																		</span>
																	}
																</div>
																if product.Description != "" && len(product.Description) > 60 {
																	<div class="text-xs text-gray-400 mt-1 line-clamp-2">{ product.Description[:60] }...</div>
																} else if product.Description != "" {
																	<div class="text-xs text-gray-400 mt-1">{ product.Description }</div>
																}
															</div>
														</div>
													</td>
													<td class="px-4 py-4 text-right">
														<div class="space-y-1">
															<div class="mobile-price text-green-400">${ fmt.Sprintf("%.2f", product.Price) }</div>
															<div class="mobile-stock">{ strconv.Itoa(product.StockCount) } in stock</div>
														</div>
													</td>
													<td class="px-4 py-4">
														<div class="flex flex-col space-y-2 mobile-actions">
															<a 
																href={ templ.SafeURL("/products/" + product.ID) } 
																class="mobile-btn border border-gray-600 text-gray-300 hover:bg-gray-700 transition-colors"
																hx-boost="true"
															>
																<svg class="h-3 w-3 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
																	<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
																	<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
																</svg>
																View
															</a>
															<a 
																href={ templ.SafeURL("/products/" + product.ID + "/edit") } 
																class="mobile-btn border border-indigo-600 text-indigo-400 hover:bg-indigo-900 transition-colors"
																hx-boost="true"
															>
																<svg class="h-3 w-3 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
																	<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 0L11.828 15H9v-2.828l8.586-8.586z" />
																</svg>
																Edit
															</a>
															<button 
																class="mobile-btn border border-red-600 text-red-500 hover:bg-red-900 transition-colors"
																hx-delete={ "/products/" + product.ID }
																hx-confirm="Are you sure you want to delete this product? This cannot be undone."
																hx-target={ "#product-row-mobile-" + product.ID }
																hx-swap="outerHTML swap:1s"
															>
																<svg class="h-3 w-3 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
																	<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
																</svg>
																Delete
															</button>
														</div>
													</td>
												</tr>
											}
										</tbody>
									</table>
								</div>
							</div>
						</div>
					} else {
						<div class="text-center py-20 bg-gray-800 rounded-lg border border-gray-700">
							<svg class="mx-auto h-12 w-12 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
							</svg>
							<h3 class="mt-2 text-xl font-medium text-gray-200">No products found</h3>
							<p class="mt-1 text-gray-400">Get started by creating your first product.</p>
							<div class="mt-6">
								<a
									href="/products/new"
									hx-boost="true"
									class="inline-flex items-center px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white text-sm font-medium rounded-md shadow-sm transition duration-150 ease-in-out"
								>
									<svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
									</svg>
									Add Product
								</a>
							</div>
						</div>
					}
				</div>
			</div>
		</div>
		
		<style>
			.bg-gray-750 {
				background-color: rgb(40, 46, 58);
			}
			.line-clamp-2 {
				display: -webkit-box;
				-webkit-line-clamp: 2;
				-webkit-box-orient: vertical;
				overflow: hidden;
			}
			.line-clamp-3 {
				display: -webkit-box;
				-webkit-line-clamp: 3;
				-webkit-box-orient: vertical;
				overflow: hidden;
			}
			@media (max-width: 1024px) {
				.container-mobile {
					padding-left: 0.75rem;
					padding-right: 0.75rem;
				}
				/* Mobile table optimizations */
				.mobile-table {
					border-collapse: separate;
					border-spacing: 0;
				}
				.mobile-table td {
					vertical-align: top;
				}
				/* Improved touch targets for mobile */
				.mobile-btn {
					min-height: 44px;
					min-width: 44px;
					display: inline-flex;
					align-items: center;
					justify-content: center;
					touch-action: manipulation;
				}
				/* Better spacing for mobile content */
				.mobile-product-info {
					line-height: 1.4;
				}
				/* Responsive badges */
				.mobile-badge {
					padding: 4px 8px;
					font-size: 11px;
					font-weight: 600;
					border-radius: 8px;
				}
				/* Mobile-friendly action buttons */
				.mobile-actions {
					min-width: 80px;
				}
				.mobile-actions button,
				.mobile-actions a {
					width: 100%;
					text-align: center;
					padding: 8px 12px;
					font-size: 12px;
					border-radius: 6px;
					transition: all 0.2s ease;
				}
				/* Price display optimization */
				.mobile-price {
					font-size: 18px;
					font-weight: 700;
					line-height: 1.2;
				}
				.mobile-stock {
					font-size: 13px;
					color: #9CA3AF;
				}
				/* Image container improvements */
				.mobile-image {
					border-radius: 8px;
					box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
				}
			}
			/* Image loading states */
			.image-loading {
				background: linear-gradient(90deg, #374151 25%, #4B5563 50%, #374151 75%);
				background-size: 200% 100%;
				animation: loading 1.5s infinite;
			}
			@keyframes loading {
				0% { background-position: 200% 0; }
				100% { background-position: -200% 0; }
			}
			.image-error {
				background-color: #374151;
				border: 1px dashed #6B7280;
			}
		</style>
		
		<script>
			// Make HTMX-safe by using window properties
			if (typeof window.DEBUG_IMAGES === 'undefined') {
				// Debug mode for image loading
				window.DEBUG_IMAGES = window.location.search.includes('debug=images');
			}
			
			// Simple and effective image error handling
			if (typeof window.handleImageError !== 'function') {
				window.handleImageError = function(img) {
					if (window.DEBUG_IMAGES) {
						console.log('Image error for:', img.src, 'Retried:', img.dataset.retried);
					}
					
					if (img.dataset.retried) {
						// If already retried, show fallback
						img.style.display = 'none';
						const fallback = img.nextElementSibling;
						if (fallback) {
							fallback.style.display = 'flex';
							fallback.classList.add('image-error');
						}
						return;
					}
					
					// Try proxy on first failure
					const originalSrc = img.src;
					if (!originalSrc.includes('/proxy/image')) {
						img.dataset.retried = 'true';
						const proxySrc = '/proxy/image?url=' + encodeURIComponent(originalSrc);
						if (window.DEBUG_IMAGES) {
							console.log('Trying proxy:', proxySrc);
						}
						img.src = proxySrc;
						return;
					}
					
					// If proxy also failed, show fallback
					if (window.DEBUG_IMAGES) {
						console.log('Proxy failed, showing fallback');
					}
					img.style.display = 'none';
					const fallback = img.nextElementSibling;
					if (fallback) {
						fallback.style.display = 'flex';
						fallback.classList.add('image-error');
					}
				};
			}
			
			// Validate image URLs and use proxy for external URLs
			if (typeof window.getImageSrc !== 'function') {
				window.getImageSrc = function(url) {
					if (!url) return '/static/img/placeholder.svg';
					
					// If it's a relative URL or already using proxy, use as-is
					if (url.startsWith('/') || url.startsWith('/proxy/image')) {
						return url;
					}
					
					// For external URLs, use direct first (proxy will be fallback on error)
					return url;
				};
			}
			
			// Initialize images for current page load
			function initializeImages() {
				const images = document.querySelectorAll('img[src]');
				if (window.DEBUG_IMAGES) {
					console.log('Found', images.length, 'images to process');
				}
				
				images.forEach((img, index) => {
					if (window.DEBUG_IMAGES) {
						console.log('Image', index, ':', img.src);
					}
					
					if (!img.complete) {
						img.classList.add('image-loading');
					}
					
					// Remove existing event listeners if any
					img.removeEventListener('load', img._loadHandler);
					img.removeEventListener('error', img._errorHandler);
					
					// Create new handlers and store references
					img._loadHandler = function() {
						this.classList.remove('image-loading');
						if (window.DEBUG_IMAGES) {
							console.log('Image loaded successfully:', this.src);
						}
					};
					
					img._errorHandler = function() {
						if (window.DEBUG_IMAGES) {
							console.log('Image error occurred:', this.src);
						}
						window.handleImageError(this);
					};
					
					img.addEventListener('load', img._loadHandler);
					img.addEventListener('error', img._errorHandler);
				});
			}
			
			// Initialize immediately if DOM is ready, otherwise wait
			if (document.readyState === 'loading') {
				document.addEventListener('DOMContentLoaded', initializeImages);
			} else {
				initializeImages();
			}
		</script>
	}
}

// Modern product list with pagination controls
templ ModernProductListPaginated(result models.PaginatedResult[models.Product]) {
	@Layout("Products") {
		<div class="bg-gray-900 text-white min-h-screen">
			<div class="max-w-7xl mx-auto px-3 sm:px-4 lg:px-6 py-4 sm:py-6 lg:py-8">
				<!-- Header Section with count -->
				<div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 space-y-4 sm:space-y-0">
					<div>
						<h1 class="text-2xl sm:text-3xl lg:text-4xl font-bold text-indigo-400">Products</h1>
						<p class="text-gray-400 text-sm sm:text-base mt-1">
							Showing { strconv.Itoa((result.Page-1)*result.PageSize + 1) } - { strconv.Itoa(min(result.Page*result.PageSize, int(result.TotalCount))) } of { strconv.FormatInt(result.TotalCount, 10) } products
						</p>
					</div>
					<a
						href="/products/new"
						hx-boost="true"
						class="w-full sm:w-auto inline-flex items-center justify-center px-4 py-3 bg-indigo-600 hover:bg-indigo-700 text-white text-base font-medium rounded-lg shadow-lg transition duration-200 ease-in-out transform hover:scale-105"
					>
						<svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
						</svg>
						Add Product
					</a>
				</div>

				<!-- Search Section -->
				<div class="mb-6">
					<div class="bg-gray-800 rounded-lg p-4">
						<form hx-get="/products" hx-trigger="input delay:300ms from:#search, change from:#search">
							<div class="flex flex-col sm:flex-row gap-3">
								<div class="flex-1">
									<input
										id="search"
										name="q"
										type="text"
										placeholder="Search products..."
										class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
									/>
								</div>
							</div>
						</form>
					</div>
				</div>

				<!-- Products display using the data from pagination result -->
				@ModernProductGrid(result.Data)

				<!-- Pagination Controls -->
				<div class="mt-8 flex flex-col sm:flex-row justify-between items-center space-y-4 sm:space-y-0">
					<div class="text-sm text-gray-400">
						Page { strconv.Itoa(result.Page) } of { strconv.Itoa(result.TotalPages) }
					</div>
					<div class="flex space-x-2">
						if result.HasPrev {
							<a
								href={ templ.SafeURL(fmt.Sprintf("/products?page=%d", result.Page-1)) }
								hx-boost="true"
								class="px-3 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-md transition-colors"
							>
								← Previous
							</a>
						} else {
							<span class="px-3 py-2 bg-gray-800 text-gray-500 rounded-md cursor-not-allowed">
								← Previous
							</span>
						}
						if result.HasNext {
							<a
								href={ templ.SafeURL(fmt.Sprintf("/products?page=%d", result.Page+1)) }
								hx-boost="true"
								class="px-3 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md transition-colors"
							>
								Next →
							</a>
						} else {
							<span class="px-3 py-2 bg-gray-800 text-gray-500 rounded-md cursor-not-allowed">
								Next →
							</span>
						}
					</div>
				</div>
			</div>
		</div>
	}
}

// Extract the product grid into a reusable component
templ ModernProductGrid(products []models.Product) {
	if len(products) == 0 {
		<div class="bg-gray-800 rounded-lg p-8 text-center">
			<div class="text-gray-400 text-lg mb-4">No products found</div>
			<a
				href="/products/new"
				hx-boost="true"
				class="inline-flex items-center px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white text-sm font-medium rounded-lg transition duration-200"
			>
				<svg class="-ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
				</svg>
				Create your first product
			</a>
		</div>
	} else {
		<!-- Products Grid (extracted from original template) -->
		<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
			for _, product := range products {
				<div class="bg-gray-800 rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300 relative group" id={ "product-" + product.ID }>
					<!-- Clickable overlay for the entire card -->
					<a
						href={ templ.SafeURL("/products/" + product.ID) }
						hx-boost="true"
						class="absolute inset-0 z-10 cursor-pointer"
						title={ "View " + product.Name }
					></a>
					
					<!-- Product card content -->
					<div class="aspect-w-16 aspect-h-9 bg-gray-700">
						if len(product.ImageURLs) > 0 {
							<img
								src={ GetImageSrc(product.ImageURLs[0]) }
								alt={ product.Name }
								class="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
								loading="lazy"
							/>
						} else {
							<div class="w-full h-48 bg-gray-600 flex items-center justify-center group-hover:bg-gray-500 transition-colors duration-300">
								<svg class="h-12 w-12 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
								</svg>
							</div>
						}
					</div>
					<div class="p-4">
						<h3 class="text-lg font-semibold text-white mb-2 truncate group-hover:text-indigo-300 transition-colors">{ product.Name }</h3>
						<p class="text-gray-400 text-sm mb-3 line-clamp-2">{ product.Description }</p>
						<div class="flex justify-between items-center mb-3">
							<span class="text-indigo-400 font-bold text-lg">${ fmt.Sprintf("%.2f", product.Price) }</span>
							<span class="text-gray-400 text-sm">Stock: { strconv.Itoa(product.StockCount) }</span>
						</div>
						<div class="flex justify-between items-center">
							<span class={ templ.KV("px-2 py-1 rounded-full text-xs font-medium", true), templ.KV("bg-green-900 text-green-200", product.IsAvailable), templ.KV("bg-red-900 text-red-200", !product.IsAvailable) }>
								if product.IsAvailable {
									Available
								} else {
									Unavailable
								}
							</span>
							<!-- Action buttons with higher z-index to override the clickable overlay -->
							<div class="flex space-x-2 relative z-20">
								<a
									href={ templ.SafeURL("/products/" + product.ID + "/edit") }
									class="text-yellow-400 hover:text-yellow-200 p-1 rounded transition-colors hover:bg-yellow-900/20"
									hx-boost="true"
									title="Edit Product"
									onclick="event.stopPropagation()"
								>
									<svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 0L11.828 15H9v-2.828l8.586-8.586z" />
									</svg>
								</a>
								<button
									class="text-red-400 hover:text-red-200 p-1 rounded transition-colors hover:bg-red-900/20"
									hx-delete={ "/products/" + product.ID }
									hx-confirm="Are you sure you want to delete this product?"
									hx-target={ "#product-" + product.ID }
									hx-swap="outerHTML swap:1s"
									title="Delete Product"
									onclick="event.stopPropagation()"
								>
									<svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
									</svg>
								</button>
							</div>
						</div>
					</div>
				</div>
			}
		</div>
	}
}

// Modern product view with integrated variant management
templ ModernProductView(product models.Product) {
	@Layout("Product Details") {
		<div class="bg-gray-900 text-white min-h-screen">
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
				<nav class="flex mb-8" aria-label="Breadcrumb">
					<ol class="flex items-center space-x-2">
						<li>
							<a href="/products" class="text-gray-400 hover:text-gray-300">Products</a>
						</li>
						<li class="flex items-center">
							<svg class="h-5 w-5 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
							</svg>
							<span class="ml-2 text-gray-300 font-medium">{ product.Name }</span>
						</li>
					</ol>
				</nav>
				
				<div class="bg-gray-800 rounded-lg shadow-xl overflow-hidden">
					<div class="p-6 border-b border-gray-700">
						<div class="flex justify-between items-start">
							<div>
								<h1 class="text-2xl font-bold text-indigo-400">{ product.Name }</h1>
								if product.Category != nil {
									<div class="text-sm text-gray-400 mt-1">
										Category: <span class="text-indigo-300">{ product.Category.Name }</span>
									</div>
								}
							</div>
							<div class="flex space-x-3">
								<a 
									href={ templ.SafeURL("/products/" + product.ID + "/edit") } 
									class="inline-flex items-center px-3 py-1.5 text-sm font-medium rounded border border-indigo-600 text-indigo-400 hover:bg-indigo-900"
									hx-boost="true"
								>
									<svg class="h-4 w-4 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 0L11.828 15H9v-2.828l8.586-8.586z" />
									</svg>
									Edit Product
								</a>
								<a 
									href="/products" 
									class="inline-flex items-center px-3 py-1.5 text-sm font-medium rounded border border-gray-600 text-gray-300 hover:bg-gray-700"
									hx-boost="true"
								>
									Back
								</a>
							</div>
						</div>
					</div>
					
					<div class="grid md:grid-cols-3 gap-6 p-6">
						<div class="md:col-span-2 space-y-6">
							<div>
								<h2 class="text-lg font-medium text-gray-300 mb-2">Description</h2>
								if product.Description != "" {
									<p class="text-gray-400">{ product.Description }</p>
								} else {
									<p class="text-gray-500 italic">No description provided</p>
								}
							</div>
							
							if len(product.ImageURLs) > 0 {
								<div>
									<h2 class="text-lg font-medium text-gray-300 mb-2">Images</h2>
									<div class="grid grid-cols-2 md:grid-cols-3 gap-4">
										for _, imageURL := range product.ImageURLs {
											<div class="relative aspect-square bg-gray-700 rounded-lg overflow-hidden">
												<img 
													src={ GetImageSrc(imageURL) } 
													data-external={ imageURL }
													alt={ product.Name } 
													class="w-full h-full object-cover"
													loading="lazy"
													crossorigin="anonymous"
													onerror="window.handleImageError(this)"
												/>
												<div class="absolute inset-0 bg-gray-700 flex items-center justify-center" style="display: none;">
													<div class="text-center">
														<svg class="mx-auto h-8 w-8 text-gray-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
															<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
														</svg>
														<p class="text-xs text-gray-500">Image not available</p>
													</div>
												</div>
											</div>
										}
									</div>
								</div>
							}
						</div>
						
						<div class="space-y-6">
							<div class="bg-gray-700 rounded-lg p-4">
								<div class="grid grid-cols-2 gap-4">
									<div>
										<h3 class="text-sm text-gray-400">Price</h3>
										<div class="text-xl font-bold text-green-400">${ fmt.Sprintf("%.2f", product.Price) }</div>
									</div>
									<div>
										<h3 class="text-sm text-gray-400">Stock</h3>
										<div class="text-xl font-bold">{ strconv.Itoa(product.StockCount) }</div>
									</div>
									<div>
										<h3 class="text-sm text-gray-400">Status</h3>
										if product.IsAvailable {
											<div class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-900 text-green-200">
												Available
											</div>
										} else {
											<div class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-900 text-red-200">
												Unavailable
											</div>
										}
									</div>
									<div>
										<h3 class="text-sm text-gray-400">Has Variants</h3>
										if product.HasVariants {
											<div class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-900 text-blue-200">
												Yes
											</div>
										} else {
											<div class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-700 text-gray-300">
												No
											</div>
										}
									</div>
								</div>
							</div>
							
							<div class="bg-gray-700 rounded-lg p-4">
								<h3 class="text-sm text-gray-300 font-medium mb-2">Product Info</h3>
								<div class="space-y-2 text-sm">
									<div class="grid grid-cols-3">
										<div class="text-gray-400">SKU:</div>
										<div class="col-span-2">{ product.Slug }</div>
									</div>
									<div class="grid grid-cols-3">
										<div class="text-gray-400">Created:</div>
										<div class="col-span-2">
											if product.CreatedAt.Valid {
												{ product.CreatedAt.Time.Format("Jan 2, 2006") }
											} else {
												<span class="text-gray-500">Unknown</span>
											}
										</div>
									</div>
									<div class="grid grid-cols-3">
										<div class="text-gray-400">Updated:</div>
										<div class="col-span-2">
											if product.UpdatedAt.Valid {
												{ product.UpdatedAt.Time.Format("Jan 2, 2006") }
											} else {
												<span class="text-gray-500">Never</span>
											}
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					
					<!-- Variants Section -->
					<div class="p-6 border-t border-gray-700">
						<div class="flex justify-between items-center mb-4">
							<h2 class="text-lg font-medium text-gray-300">Product Variants</h2>
							<button 
								class="inline-flex items-center px-3 py-1.5 text-sm font-medium rounded bg-indigo-600 text-white hover:bg-indigo-700"
								onclick="document.getElementById('add-variant-modal').classList.remove('hidden')"
							>
								<svg class="h-4 w-4 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
								</svg>
								Add Variant
							</button>
						</div>
						
						if product.HasVariants && len(product.Variants) > 0 {
							<div class="overflow-x-auto">
								<table class="min-w-full bg-gray-900 rounded-lg overflow-hidden">
									<thead class="bg-gray-700">
										<tr>
											<th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Name</th>
											<th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Price</th>
											<th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Stock</th>
											<th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Status</th>
											<th class="px-6 py-3 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
										</tr>
									</thead>
									<tbody class="divide-y divide-gray-700" id="variants-container">
										for _, variant := range product.Variants {
											<tr id={ "variant-row-" + variant.ID } class="bg-gray-800 hover:bg-gray-750">
												<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-300">
													{ variant.Name }
												</td>
												<td class="px-6 py-4 whitespace-nowrap text-sm text-green-400">
													${ fmt.Sprintf("%.2f", variant.Price) }
												</td>
												<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
													{ strconv.Itoa(variant.StockCount) }
												</td>
												<td class="px-6 py-4 whitespace-nowrap">
													if variant.IsAvailable {
														<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-900 text-green-200">
															Available
														</span>
													} else {
														<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-900 text-red-200">
															Unavailable
														</span>
													}
												</td>
												<td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
													<div class="flex justify-end space-x-3">
														<button 
															class="text-indigo-400 hover:text-indigo-300"
															hx-get={ "/api/v1/products/" + product.ID + "/variants/" + variant.ID + "/edit-form" }
															hx-target="#edit-variant-modal-content"
															onclick="document.getElementById('edit-variant-modal').classList.remove('hidden')"
														>
															Edit
														</button>
														<button 
															class="text-red-500 hover:text-red-400"
															hx-delete={ "/products/" + product.ID + "/variants/" + variant.ID }
															hx-confirm="Are you sure you want to delete this variant?"
															hx-target={ "#variant-row-" + variant.ID }
															hx-swap="outerHTML swap:1s"
														>
															Delete
														</button>
													</div>
												</td>
											</tr>
										}
									</tbody>
								</table>
							</div>
						} else {
							<div class="text-center py-12 bg-gray-800 rounded-lg border border-gray-700">
								<svg class="mx-auto h-12 w-12 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
								</svg>
								<h3 class="mt-2 text-lg font-medium text-gray-200">No variants</h3>
								<p class="mt-1 text-gray-400">This product doesn't have any variants yet.</p>
								<div class="mt-6">
									<button
										class="inline-flex items-center px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white text-sm font-medium rounded-md shadow-sm transition duration-150 ease-in-out"
										onclick="document.getElementById('add-variant-modal').classList.remove('hidden')"
									>
										<svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
										</svg>
										Add First Variant
									</button>
								</div>
							</div>
						}
					</div>
				</div>
			</div>
		</div>
		
		<!-- Edit Variant Modal -->
		<div id="edit-variant-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
			<div class="bg-gray-800 rounded-lg shadow-xl max-w-md w-full mx-4">
				<div class="p-4 border-b border-gray-700 flex justify-between items-center">
					<h3 class="text-lg font-medium text-gray-200">Edit Variant</h3>
					<button 
						class="text-gray-400 hover:text-gray-200" 
						onclick="document.getElementById('edit-variant-modal').classList.add('hidden')"
					>
						<svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
						</svg>
					</button>
				</div>
				<div id="edit-variant-modal-content" class="p-4">
					<!-- Modal content will be loaded here via HTMX -->
					<div class="flex justify-center py-12">
						<svg class="animate-spin -ml-1 mr-3 h-8 w-8 text-indigo-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
							<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
							<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
						</svg>
						<span class="text-gray-400">Loading...</span>
					</div>
				</div>
			</div>
		</div>
		
		<!-- Add Variant Modal -->
		<div id="add-variant-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
			<div class="bg-gray-800 rounded-lg shadow-xl max-w-md w-full mx-4">
				<div class="p-4 border-b border-gray-700 flex justify-between items-center">
					<h3 class="text-lg font-medium text-gray-200">Add New Variant</h3>
					<button 
						class="text-gray-400 hover:text-gray-200" 
						onclick="document.getElementById('add-variant-modal').classList.add('hidden')"
					>
						<svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
						</svg>
					</button>
				</div>
				<div class="p-4">
					<form
						hx-post={ "/products/" + product.ID + "/variants" }
						hx-on::after-request="if(event.detail.successful) window.location.reload()"
						
						class="space-y-4"
					>
						<div>
							<label for="name" class="block text-sm font-medium text-gray-300">Name</label>
							<input
								type="text"
								id="name"
								name="name"
								placeholder="e.g. 5 grams"
								class="mt-1 block w-full rounded-md border-0 py-1.5 bg-gray-700 text-white shadow-sm ring-1 ring-inset ring-gray-600 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm"
								required
							/>
						</div>
						
						<div class="grid grid-cols-2 gap-4">
							<div>
								<label for="price" class="block text-sm font-medium text-gray-300">Price</label>
								<div class="mt-1 relative rounded-md shadow-sm">
									<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
										<span class="text-gray-400 sm:text-sm">$</span>
									</div>
									<input
										type="number"
										id="price"
										name="price"
										value={ fmt.Sprintf("%.2f", product.Price) }
										step="0.01"
										min="0"
										class="block w-full rounded-md border-0 py-1.5 pl-7 bg-gray-700 text-white shadow-sm ring-1 ring-inset ring-gray-600 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm"
										required
									/>
								</div>
							</div>
							
							<div>
								<label for="stock_count" class="block text-sm font-medium text-gray-300">Stock</label>
								<input
									type="number"
									id="stock_count"
									name="stock_count"
									value="0"
									min="0"
									class="mt-1 block w-full rounded-md border-0 py-1.5 bg-gray-700 text-white shadow-sm ring-1 ring-inset ring-gray-600 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm"
									required
								/>
							</div>
						</div>
						
						<div class="flex items-center">
							<input
								type="checkbox"
								id="is_available"
								name="is_available"
								value="true"
								checked
								class="h-4 w-4 rounded bg-gray-700 border-gray-600 text-indigo-600 focus:ring-indigo-500"
							/>
							<label for="is_available" class="ml-2 block text-sm text-gray-300">
								Available for purchase
							</label>
						</div>
						
						<div class="flex justify-end space-x-3 pt-4">
							<button
								type="button"
								class="px-4 py-2 bg-gray-700 text-gray-300 rounded hover:bg-gray-600"
								onclick="document.getElementById('add-variant-modal').classList.add('hidden')"
							>
								Cancel
							</button>
							<button
								type="submit"
								class="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700"
							>
								Add Variant
							</button>
						</div>
					</form>
					
					<div class="mt-6 pt-6 border-t border-gray-700">
						<h4 class="text-sm font-medium text-gray-300 mb-2">Quick Add Templates</h4>
						<div class="grid grid-cols-2 gap-4">
							<button 
								class="px-3 py-2 text-xs font-medium bg-indigo-900 text-indigo-200 rounded hover:bg-indigo-800"
								hx-post={ "/products/" + product.ID + "/bulk-variants" }
								hx-vals='{"template": "standard", "weights": "5,15,25,35"}'
								hx-on::after-request="if(event.detail.successful) window.location.reload()"
								
							>
								Standard Weights
								<div class="text-xs mt-1 text-indigo-400">5g, 15g, 25g, 35g</div>
							</button>
							
							<button 
								class="px-3 py-2 text-xs font-medium bg-indigo-900 text-indigo-200 rounded hover:bg-indigo-800"
								hx-post={ "/products/" + product.ID + "/bulk-variants" }
								hx-vals='{"template": "small", "weights": "3,5,10"}'
								hx-on::after-request="if(event.detail.successful) window.location.reload()"
								
							>
								Small Weights
								<div class="text-xs mt-1 text-indigo-400">3g, 5g, 10g</div>
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>
		
		<style>
			.bg-gray-750 {
				background-color: rgb(40, 46, 58);
			}
		</style>
	}
}

// Quick variant edit form for modal
templ VariantEditForm(product models.Product, variant models.ProductVariant) {
	<form
		hx-put={ "/api/v1/products/" + product.ID + "/variants/" + variant.ID }
		hx-target="#variants-container"
		hx-swap="innerHTML"
		class="space-y-4"
		hx-on::after-request="document.getElementById('edit-variant-modal').classList.add('hidden')"
	>
		<div>
			<label for="name" class="block text-sm font-medium text-gray-300">Name</label>
			<input
				type="text"
				id="name"
				name="name"
				value={ variant.Name }
				class="mt-1 block w-full rounded-md border-0 py-1.5 bg-gray-700 text-white shadow-sm ring-1 ring-inset ring-gray-600 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm"
				required
			/>
		</div>
		
		<div class="grid grid-cols-2 gap-4">
			<div>
				<label for="price" class="block text-sm font-medium text-gray-300">Price</label>
				<div class="mt-1 relative rounded-md shadow-sm">
					<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
						<span class="text-gray-400 sm:text-sm">$</span>
					</div>
					<input
						type="number"
						id="price"
						name="price"
						value={ fmt.Sprintf("%.2f", variant.Price) }
						step="0.01"
						min="0"
						class="block w-full rounded-md border-0 py-1.5 pl-7 bg-gray-700 text-white shadow-sm ring-1 ring-inset ring-gray-600 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm"
						required
					/>
				</div>
			</div>
			
			<div>
				<label for="stock_count" class="block text-sm font-medium text-gray-300">Stock</label>
				<input
					type="number"
					id="stock_count"
					name="stock_count"
					value={ strconv.Itoa(variant.StockCount) }
					min="0"
					class="mt-1 block w-full rounded-md border-0 py-1.5 bg-gray-700 text-white shadow-sm ring-1 ring-inset ring-gray-600 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm"
					required
				/>
			</div>
		</div>
		
		<div class="flex items-center">
			<input
				type="checkbox"
				id="is_available"
				name="is_available"
				value="true"
				if variant.IsAvailable {
					checked
				}
				class="h-4 w-4 rounded bg-gray-700 border-gray-600 text-indigo-600 focus:ring-indigo-500"
			/>
			<label for="is_available" class="ml-2 block text-sm text-gray-300">
				Available for purchase
			</label>
		</div>
		
		<div class="flex justify-end space-x-3 pt-4">
			<button
				type="button"
				class="px-4 py-2 bg-gray-700 text-gray-300 rounded hover:bg-gray-600"
				onclick="document.getElementById('edit-variant-modal').classList.add('hidden')"
			>
				Cancel
			</button>
			<button
				type="submit"
				class="px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700"
			>
				Save Changes
			</button>
		</div>
	</form>
}
